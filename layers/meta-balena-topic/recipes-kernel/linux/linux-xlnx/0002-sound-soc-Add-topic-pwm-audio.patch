From c57713ddc308d87edcd9adc7d8c895b0a264ff8a Mon Sep 17 00:00:00 2001
From: Mike Looijmans <mike.looijmans@topic.nl>
Date: Mon, 22 May 2023 16:56:53 +0200
Subject: [PATCH 2/2] sound: soc: Add topic-pwm-audio

Driver for PWM audio IP in FPGA. Basically just an "enable" GPIO and
some sampling rate restrictions, and some glue code to activate the
DMA engine.

Upstream-status: Inappropriate
---
 sound/soc/adi/Kconfig           |   7 ++
 sound/soc/adi/Makefile          |   2 +
 sound/soc/adi/topic-pwm-audio.c | 174 ++++++++++++++++++++++++++++++++
 3 files changed, 183 insertions(+)
 create mode 100644 sound/soc/adi/topic-pwm-audio.c

diff --git a/sound/soc/adi/Kconfig b/sound/soc/adi/Kconfig
index 0236dc5b4e9f..e65a3fdb5c9b 100644
--- a/sound/soc/adi/Kconfig
+++ b/sound/soc/adi/Kconfig
@@ -19,3 +19,10 @@ config SND_SOC_ADI_AXI_SPDIF
 	select REGMAP_MMIO
 	help
 	  ASoC driver for the Analog Devices AXI-SPDIF softcore peripheral.
+
+config SND_SOC_TOPIC_PWM_AUDIO
+	tristate "TOPIC PWM Audio core support"
+	default y
+	select SND_SOC_GENERIC_DMAENGINE_PCM
+	help
+	  ASoC driver for the TOPIC PWM Audio softcore.
diff --git a/sound/soc/adi/Makefile b/sound/soc/adi/Makefile
index 125f667b0e08..ca763dad9ab7 100644
--- a/sound/soc/adi/Makefile
+++ b/sound/soc/adi/Makefile
@@ -1,6 +1,8 @@
 # SPDX-License-Identifier: GPL-2.0-only
 snd-soc-adi-axi-i2s-objs := axi-i2s.o
 snd-soc-adi-axi-spdif-objs := axi-spdif.o
+snd-soc-adi-topic-pwm-audio-objs := topic-pwm-audio.o
 
 obj-$(CONFIG_SND_SOC_ADI_AXI_I2S) += snd-soc-adi-axi-i2s.o
 obj-$(CONFIG_SND_SOC_ADI_AXI_SPDIF) += snd-soc-adi-axi-spdif.o
+obj-$(CONFIG_SND_SOC_TOPIC_PWM_AUDIO) += snd-soc-adi-topic-pwm-audio.o
diff --git a/sound/soc/adi/topic-pwm-audio.c b/sound/soc/adi/topic-pwm-audio.c
new file mode 100644
index 000000000000..e3e746192cbf
--- /dev/null
+++ b/sound/soc/adi/topic-pwm-audio.c
@@ -0,0 +1,174 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2023, Topic Embedded Systems
+ * Based on axi-i2s
+ */
+
+#include <linux/init.h>
+#include <linux/gpio/consumer.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/dmaengine_pcm.h>
+
+struct pwm_audio {
+	struct gpio_desc *gpio_enable;
+	struct gpio_desc *gpio_mute;
+};
+
+static int pwm_audio_trigger(struct snd_pcm_substream *substream, int cmd,
+	struct snd_soc_dai *dai)
+{
+	struct pwm_audio *data = snd_soc_dai_get_drvdata(dai);
+
+	pr_info("%s (%d)\n", __func__, cmd);
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		gpiod_set_value(data->gpio_enable, 1);
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		gpiod_set_value(data->gpio_enable, 0);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int pwm_audio_startup(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	int ret;
+
+	ret = snd_pcm_hw_constraint_minmax(substream->runtime,
+					   SNDRV_PCM_HW_PARAM_RATE,
+					   44000, 50000);
+
+	pr_info("%s: %d\n", __func__, ret);
+
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+
+static int pwm_audio_mute_stream(struct snd_soc_dai *dai, int mute, int direction)
+{
+	struct pwm_audio *data = snd_soc_dai_get_drvdata(dai);
+
+	pr_info("%s (%d, %d)\n", __func__, mute, direction);
+
+	gpiod_set_value_cansleep(data->gpio_mute, mute);
+
+	return 0;
+}
+
+static const struct snd_dmaengine_dai_dma_data pwm_audio_playback_dma_data = {
+	.addr = 0, /* Data going nowhere ... */
+	.addr_width = 4,
+	.maxburst = 1,
+};
+
+static int pwm_audio_dai_probe(struct snd_soc_dai *dai)
+{
+	snd_soc_dai_init_dma_data(dai, &pwm_audio_playback_dma_data, NULL);
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops pwm_audio_dai_ops = {
+	.startup = pwm_audio_startup,
+	.mute_stream = pwm_audio_mute_stream,
+	.trigger = pwm_audio_trigger,
+};
+
+static struct snd_soc_dai_driver pwm_audio_dai = {
+	.name = "PWM-Audio",
+	.playback = {
+		.stream_name = "Playback",
+		.channels_min = 2,
+		.channels_max = 2,
+		/* DMA configured for 32-bit, even though we're only 12-bit */
+		.formats = SNDRV_PCM_FMTBIT_S32_LE,
+		/* We support anything between 44 and 50kHz */
+		.rates = SNDRV_PCM_RATE_CONTINUOUS,
+		.rate_min = 44000,
+		.rate_max = 50000,
+	},
+	.probe = pwm_audio_dai_probe,
+	.ops = &pwm_audio_dai_ops,
+};
+
+static const struct snd_soc_component_driver pwm_audio_component = {
+	.name = "topic-pwm-audio",
+};
+
+static int pwm_audio_probe(struct platform_device *pdev)
+{
+	struct pwm_audio *data;
+	int ret;
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, data);
+
+	data->gpio_mute = devm_gpiod_get_optional(&pdev->dev, "mute",
+						 GPIOD_OUT_HIGH);
+	if (IS_ERR(data->gpio_mute))
+		return dev_err_probe(&pdev->dev, PTR_ERR(data->gpio_mute),
+				     "Failed to get mute gpio\n");
+
+	data->gpio_enable = devm_gpiod_get_optional(&pdev->dev, "enable",
+						   GPIOD_OUT_LOW);
+	if (IS_ERR(data->gpio_enable))
+		return dev_err_probe(&pdev->dev, PTR_ERR(data->gpio_enable),
+				     "Failed to get enable gpio\n");
+
+	ret = devm_snd_soc_register_component(&pdev->dev, &pwm_audio_component,
+					      &pwm_audio_dai, 1);
+	if (ret)
+		return ret;
+
+	ret = devm_snd_dmaengine_pcm_register(&pdev->dev, NULL, 0);
+	if (ret)
+		return ret;
+
+	dev_info(&pdev->dev, "probed");
+
+	return 0;
+}
+
+static const struct of_device_id pwm_audio_of_match[] = {
+	{ .compatible = "topic,pwm-audio", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, pwm_audio_of_match);
+
+static struct platform_driver pwm_audio_driver = {
+	.driver = {
+		.name = "topic-pwm-audio",
+		.of_match_table = pwm_audio_of_match,
+	},
+	.probe = pwm_audio_probe,
+};
+module_platform_driver(pwm_audio_driver);
+
+MODULE_AUTHOR("Mike Looijmans <mike.looijmans@topic.nl>");
+MODULE_DESCRIPTION("TOPIC PWM Audio core");
+MODULE_LICENSE("GPL");
-- 
2.17.1

